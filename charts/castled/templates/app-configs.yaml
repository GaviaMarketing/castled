apiVersion: v1
kind: ConfigMap
metadata:
  name: castled-configs
  annotations:
    helm.sh/hook: pre-install,pre-upgrade
    helm.sh/hook-weight: "-1"
data:
  "config.yml": |
    server:
      applicationConnectors:
        - type: http
          port: 7050
          bindHost: 0.0.0.0
      adminConnectors:
        - type: http
          port: 7051
      rootPath: /backend

    redis_config:
      host: {{ .Values.redis.host }}
      port: {{ .Values.redis.port }}

    kafka_servers: {{ .Values.kafka.host }}:{{ .Values.kafka.port }}

    jarvis_task_config:
      priority_cool_down_mins: 1
      group_config:
        - group: PIPELINE_RUN
          worker_count: 10
        - group: OTHERS
          worker_count: 10

    jarvis_scheduler_config:
      quartz_config:
        org.quartz.scheduler.skipUpdateCheck: true
        org.quartz.scheduler.instanceName: DatabaseScheduler
        org.quartz.scheduler.instanceId: AUTO
        org.quartz.scheduler.jobFactory.class: org.quartz.simpl.SimpleJobFactory
        org.quartz.threadPool.class: org.quartz.simpl.SimpleThreadPool
        org.quartz.threadPool.threadCount: 3
        org.quartz.jobStore.class: org.quartz.impl.jdbcjobstore.JobStoreTX
        org.quartz.jobStore.driverDelegateClass: org.quartz.impl.jdbcjobstore.StdJDBCDelegate
        org.quartz.jobStore.useProperties: false
        org.quartz.jobStore.dataSource: quartzDataSource
        org.quartz.jobStore.tablePrefix: QRTZ_
        org.quartz.jobStore.isClustered: true
        org.quartz.jobStore.clusterCheckinInterval: 60000
        org.quartz.dataSource.quartzDataSource.driver: com.mysql.cj.jdbc.Driver
        org.quartz.dataSource.quartzDataSource.URL: {{ .Values.db.url }}
        org.quartz.dataSource.quartzDataSource.user: {{ .Values.db.user }}
        org.quartz.dataSource.quartzDataSource.password: {{ .Values.db.password }}
        org.quartz.dataSource.quartzDataSource.maxConnections: 5

      schedule_overrides:
        io.castled.DummyScheduledJob: "0/30 * * * * ?"
        io.castled.jarvis.taskmanager.scheduledjobs.TaskRetryJob: "0/30 * * * * ?"
        io.castled.jarvis.taskmanager.scheduledjobs.TaskRefreshJob: "0/30 * * * * ?"


    database:
      # the name of your JDBC driver
      driverClass: com.mysql.cj.jdbc.Driver

      # the username
      user: {{ .Values.db.user }}

      # the password
      password: {{ .Values.db.password }}

      # the JDBC URL
      url: {{ .Values.db.url }}

      # any properties specific to your JDBC driver:
      properties:
        charSet: UTF-8

      # the maximum amount of time to wait on an empty pool before throwing an exception
      maxWaitForConnection: 1s

      # the SQL query to run when validating a connection's liveness
      validationQuery: "/* MyService Health Check */ SELECT 1"

      # the timeout before a connection validation queries fail
      validationQueryTimeout: 3s

      # the minimum number of connections to keep open
      minSize: 8

      # the maximum number of connections to keep open
      maxSize: 32

      # whether or not idle connections should be validated
      checkConnectionWhileIdle: false

      # the amount of time to sleep between runs of the idle connection validation, abandoned cleaner and idle pool resizing
      evictionInterval: 10s

      # the minimum amount of time an connection must sit idle in the pool before it is eligible for eviction
      minIdleTime: 1 minute

    logging:
      level: {{ .Values.app.logLevel }}
      appenders:
        - type: console
      loggers:
        io.dropwizard: {{ .Values.app.logLevel }}

    self_url_configuration:
      server_url: http://localhost:3000/backend/
      ui_url: http://localhost:3000

    jersey_client:
      timeout: 5000ms
      connectionTimeout: 5000ms
      gzipEnabled: false

    kafka_config:
      bootstrap_servers: {{ .Values.kafka.host }}:{{ .Values.kafka.port }}

    jwt_auth_configuration:
      secret_key: secret
      expiry_secs: 50000

    swagger:
      resourcePackage: io.castled

    doc_configuration:
      docUrl: https://oss-docs.castled.io
